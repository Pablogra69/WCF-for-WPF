//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPF_Client_for_WCF.ComplexTest {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ComplexTest.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Add", ReplyAction="http://tempuri.org/IService1/AddResponse")]
        string Add(double valueReal1, double valueImaginary1, double valueReal2, double valueImaginary2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Add", ReplyAction="http://tempuri.org/IService1/AddResponse")]
        System.Threading.Tasks.Task<string> AddAsync(double valueReal1, double valueImaginary1, double valueReal2, double valueImaginary2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Divide", ReplyAction="http://tempuri.org/IService1/DivideResponse")]
        string Divide(double valueReal1, double valueImaginary1, double valueReal2, double valueImaginary2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Divide", ReplyAction="http://tempuri.org/IService1/DivideResponse")]
        System.Threading.Tasks.Task<string> DivideAsync(double valueReal1, double valueImaginary1, double valueReal2, double valueImaginary2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Multiply", ReplyAction="http://tempuri.org/IService1/MultiplyResponse")]
        string Multiply(double valueReal1, double valueImaginary1, double valueReal2, double valueImaginary2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Multiply", ReplyAction="http://tempuri.org/IService1/MultiplyResponse")]
        System.Threading.Tasks.Task<string> MultiplyAsync(double valueReal1, double valueImaginary1, double valueReal2, double valueImaginary2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Subtract", ReplyAction="http://tempuri.org/IService1/SubtractResponse")]
        string Subtract(double valueReal1, double valueImaginary1, double valueReal2, double valueImaginary2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Subtract", ReplyAction="http://tempuri.org/IService1/SubtractResponse")]
        System.Threading.Tasks.Task<string> SubtractAsync(double valueReal1, double valueImaginary1, double valueReal2, double valueImaginary2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WPF_Client_for_WCF.ComplexTest.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WPF_Client_for_WCF.ComplexTest.IService1>, WPF_Client_for_WCF.ComplexTest.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Add(double valueReal1, double valueImaginary1, double valueReal2, double valueImaginary2) {
            return base.Channel.Add(valueReal1, valueImaginary1, valueReal2, valueImaginary2);
        }
        
        public System.Threading.Tasks.Task<string> AddAsync(double valueReal1, double valueImaginary1, double valueReal2, double valueImaginary2) {
            return base.Channel.AddAsync(valueReal1, valueImaginary1, valueReal2, valueImaginary2);
        }
        
        public string Divide(double valueReal1, double valueImaginary1, double valueReal2, double valueImaginary2) {
            return base.Channel.Divide(valueReal1, valueImaginary1, valueReal2, valueImaginary2);
        }
        
        public System.Threading.Tasks.Task<string> DivideAsync(double valueReal1, double valueImaginary1, double valueReal2, double valueImaginary2) {
            return base.Channel.DivideAsync(valueReal1, valueImaginary1, valueReal2, valueImaginary2);
        }
        
        public string Multiply(double valueReal1, double valueImaginary1, double valueReal2, double valueImaginary2) {
            return base.Channel.Multiply(valueReal1, valueImaginary1, valueReal2, valueImaginary2);
        }
        
        public System.Threading.Tasks.Task<string> MultiplyAsync(double valueReal1, double valueImaginary1, double valueReal2, double valueImaginary2) {
            return base.Channel.MultiplyAsync(valueReal1, valueImaginary1, valueReal2, valueImaginary2);
        }
        
        public string Subtract(double valueReal1, double valueImaginary1, double valueReal2, double valueImaginary2) {
            return base.Channel.Subtract(valueReal1, valueImaginary1, valueReal2, valueImaginary2);
        }
        
        public System.Threading.Tasks.Task<string> SubtractAsync(double valueReal1, double valueImaginary1, double valueReal2, double valueImaginary2) {
            return base.Channel.SubtractAsync(valueReal1, valueImaginary1, valueReal2, valueImaginary2);
        }
    }
}
